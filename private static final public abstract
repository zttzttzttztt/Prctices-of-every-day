一、
1、private 私有的
private实现封装，封装的优点：可以保护数据不被破坏；使用getter、setter方法对属性进行操作可以进行错误检查

private：

1、修饰变量：

    1）变量不可被继承；

    2）只允许本类中访问

2、修饰方法：

    1）不可被继承；

    2）可被本类中其他方法调用；

    3）如果方法为私有则表示它不可能在类的外部任何一个地方被操作，可以被删除替代

2、final
1、final变量：

    1）变量名大写(习惯)，视为常量；

    2）一旦赋值不可更改(仅赋值一次)；引用数据类型final变量，初始化之后不能再指向另外一个对象，但对象的内容可以改变

2、final方法：

    1）不可被子类重写可以被继承；

    2）不能修饰构造方法；

    3）final方法比非final方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定；

3、final类：不可被继承

4、final参数：只可读，不可以修改

注：父类的private成员方法是不能被子类方法覆盖的，因此private类型的方法默认是final类型的

3、static 静态
1、static变量(其实一般为静态常量 static final)：

    1）直接使用 类名.变量名 调用； 

    2）随着类加载时被完成初始化；

    3）类的所有实例共享静态变量（独立于类的实例对象），JVM也只会为它分配一次内存；

    一般在这两种情况下使用静态变量：对象之间共享数据、访问方便。

2、static方法：

    1）不可被子类重写（如果子类含有相同静态方法则与父类的静态方法无关）；

    2）直接以类名调用，也可以使用实例调用(避免)；

    3）没有this，因为不依赖于任何实例对象；

    4）不能访问非静态成员变量与非静态成员方法；

    5）static方法必须实现，也就是说他不能是抽象方法abstract；

    使用情景：方法不需要访问对象状态，其所需参数均显示参数提供；只需要访问静态域；

3、static代码块：

    1）可以置于类中的任何地方；

    2）一个类可以有多个static块；

    3）类初次被加载的时候，会按照static块的顺序来执行每个static块，并且只会执行一次（相反的，非static代码块只要构造类的对象就会执行）。

4、工厂方法：

    1）一种常见的构造对象的方式，使用静态方法构造一个类的实例；

    2）出现原因：无法命名构造器，因为构造方法必须与类名相同；构造器无法改变所构造的对象类型

注意：static不可以修饰局部变量；static变量在定义时初始化（否则自动初始化）；



二、abstract、final、static、private是否能一起使用？为什么？

抽象 abstract：
abstract修饰符可以用于类、方法、属性、事件和索引指示器(indexer)，表示其为抽象成员，抽象方法是没有方法体的方法。
(1)用abstract关键字修饰的方法是抽象方法,抽象方法无需实现。
例：
abstract class Test {
public void a() {
// 代码省略
}
public abstract void b();
}
== 如果JAVA类的任何一个方法是abstract的，则类本身必须是abstract的。==
(2)当一个类被声明为abstract时，这个类被称为抽象类。所谓的抽象类就是没有实例对象的类。
(3)继承自抽象类的子类必须覆盖实现父类中的抽象方法 。
例：
abstract class T {
public void a() {
// 代码省略
}	
public abstract void b();
}
public class Test extends T{	
@Override
public void b() {
// TODO 自动生成的方法存根	
}	
}

abstract、final、static、private是否能一起使用？

abstract class Test {
//	类型 Test 中的抽象方法 只能设置可见性修饰符“public”或“protected”中的一个
//	private abstract void a();	
//	public final abstract void b();
//	public static abstract void c();
}

1.private关键字
(1)修饰成员：可以修饰成员变量和成员方法
(2)特点：被private修饰后的成员只能在本类中被访问
abstract不能和private一起使用：private修饰后的方法为私有方法，只能在本类中被使用，子类不能继承，而abstract子类必须覆盖实现父类中的抽象方法，相互冲突，不能使用

2.final关键字
(1)final类:final类不能被继承，因此final类的成员方法没有机会被覆盖，默认都是final的。
(2)final方法:如果一个类不允许其子类覆盖某个方法，则可以把这个方法声明为final方法。
(3)final变量(常量):用final修饰的成员变量表示常量，只能被赋值一次，赋值后值无法改变。
abstract不能和final一起使用：final修饰后的方法，锁定方法，防止任何继承类修改它的意义和实现，而abstract子类必须覆盖实现父类中的抽象方法，相互冲突，不能使用

3.static关键字
(1)为特定的数据类型或对象分配单一的存储空间.
(2)实现某个方法或属性与类关联在一起，被static修饰的变量和方法，可以通过类名.变量名或类名.方法名直接引用。
abstract不能和static一起使用：static修饰的是静态方法，可以直接被类调用；而abstract修饰的类中只有方法名，无方法体，不能被直接调用，故abstract不能和static一起使用


