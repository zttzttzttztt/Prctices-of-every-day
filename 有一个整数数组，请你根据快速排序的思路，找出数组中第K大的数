
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int  n = in.nextInt();
        int[] a=new int[n];
        for(int i=0;i<n;i++){
            a[i]=in.nextInt();
        }
        int K = in.nextInt();
        System.out.println(FindK(a,K,n));
    }

    private static int  FindK(int[] a, int k,int n) {
        for(int i=0;i<n-1;i++){
            int max=i;
            for(int j=i+1;j<n;j++){
                if(a[j]>a[max])
                    max=j;
            }
            int c=a[max];
            a[max]=a[i];
            a[i]=c;
        }
        return a[k-1];
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int  n = in.nextInt();
        int[] a=new int[n];
        for(int i=0;i<n;i++){
            a[i]=in.nextInt();
        }
        int K = in.nextInt();
        System.out.println(findKth(a,0,n,K));
    }

    public int findKth(int[] a, int n, int K) {
        return findKth(a, 0, n-1, K);
    }
    public static int findKth(int[] a, int low, int high, int k) {
        int part = partation(a, low, high);

        if(k == part - low + 1) return a[part];
        else if(k > part - low + 1) return findKth(a, part + 1, high, k - part + low -1);
        else return findKth(a, low, part -1, k);

    }
    public static int partation(int[] a, int low, int high) {
        int key = a[low];
        while(low < high) {
            while(low < high && a[high] <= key) high--;
            a[low] = a[high];
            while(low < high && a[low] >= key) low++;
            a[high] = a[low];
        }
        a[low] = key;
        return low;
    }
}
