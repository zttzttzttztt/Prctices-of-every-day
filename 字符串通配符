
public class Solution{
    public boolean isMatch(String s, String p) {
        if (p==null||p.isEmpty())return s==null||s.isEmpty();
        int i=0,j=0,istart=-1,jstart=-1,slen=s.length(),plen=p.length();
        //判断s的所有字符是否匹配
        while (i<slen){
            //三种匹配成功情况以及匹配失败返回false
            if (j<plen&&(s.charAt(i)==p.charAt(j)||p.charAt(j)=='?')){
                i++;
                j++;
            }else if (j<plen&&p.charAt(j)=='*'){
                istart=i;
                jstart=j++;
            }else if (istart>-1){
                i=++istart;
                j=jstart+1;
            }else {
                return false;
            }
        }
        //s中的字符都判断完毕，则认为s为空，此时需要p为空或者p中只剩下星号的时候，才能成功匹配。
        //如果p中剩余的都是*，则可以移除剩余的*
        while (j<plen&&p.charAt(j)=='*')j++;
        return j==plen;
    }
    public boolean isMatch2(String s, String p) {
        if (p==null||p.isEmpty())return s==null||s.isEmpty();
        int slen = s.length(),plen=p.length();
        boolean[][] dp=new boolean[slen+1][plen+1];
        //初始化dp数组,dp[1][0]~dp[s.length][0]默认值flase不需要显式初始化为false
        dp[0][0]=true;
        //dp[0][1]~dp[0][p.length]只有p的j字符以及前面所有字符都为'*'才为true
        for (int j=1;j<=plen;j++)dp[0][j]=p.charAt(j-1)=='*'&&dp[0][j-1];
        //填写dp数组剩余部分
        for (int i = 1; i <= slen; i++) {
            for (int j = 1; j <= plen; j++) {
                char si = s.charAt(i - 1),pj=p.charAt(j-1);
                if (si==pj||pj=='?'){
                    dp[i][j]=dp[i-1][j-1];
                }else if (pj=='*'){
                    dp[i][j]=dp[i-1][j]||dp[i][j-1];
                }
            }
        }
        return dp[slen][plen];
    }


    public static void main(String[] args) {
        Scanner s=new Scanner(System.in);
        String s1=s.nextLine();
        String s2=s.nextLine();
        Solution s3=new Solution();
        System.out.println(s3.isMatch2(s1,s2));
    }
}
