class Solution {
    public int thirdMax(int[] nums) {
        long max = Long.MIN_VALUE;
        long second = Long.MIN_VALUE;
        long third = Long.MIN_VALUE;
        for(int i : nums) {
            if(i > max) {
                third = second;
                second = max;
                max = i;
            }else if(i > second && i < max) {
                third = second;
                second = i;
            }else if(i > third && i < second) {
                third = i;
            }
        }
        return (int) (third == Long.MIN_VALUE?max:third);
    }

    public static void main(String[] args) {
        Solution s=new Solution();
        int[] a={9,6,7,8,3,2,4,5};
        int[] b={9,7,6};
       System.out.println( s.thirdMax(b));
        System.out.println( s.thirdMax1(b));
      }


    public int thirdMax1(int[] nums) {
        SelectionSort(nums,nums.length);
        if(nums.length>=3)
            return nums[nums.length-3];
        else
            return  nums[nums.length-1];

    }
    void SelectionSort(int[] nums,int n)//选择排序
    {
        for(int i=0;i<n-1;i++)//i代表排序次数,一共n-1次
        {
            int min_id=i;//每次遍历查找最小数的下标
            for(int j=i+1;j<n;j++)//j代表遍历下标，每次都从i+1开始，遍历到最后一个数
            {
                if(nums[j]<nums[min_id])
                    min_id=j;
            }
            if(min_id!=i)//如果最小数下标和最初位置不等则交换
            {
                Swap(nums,min_id,i);
            }
        }

    }
    private void Swap(int[] a, int minindex, int i) {
        int t = a[minindex];
        a[minindex] = a[i];
        a[i] = t;
    }
