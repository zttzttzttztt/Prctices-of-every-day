
public class Solution {
public boolean[][] getMat(String s){
int len = s.length();
boolean[][] Mat = new boolean[len][len];
for(int i = len - 1; i >= 0; --i){
for(int j = i; j < len; ++j){
if(j == i)
// 单字符为回文字符串
Mat[i][j] = true;
else if(j == i + 1){
// 相邻字符如果相同，则为回文字符串
if(s.charAt(i) == s.charAt(j))
Mat[i][j] = true;
else
Mat[i][j] = false;
}
else{
// F(i,j) = {s[i]==s[j] && F(i+1,j-1)
// j > i+1
Mat[i][j] = (s.charAt(i) == s.charAt(j)) && Mat[i + 1][j - 1];
}

}
}
return Mat;
}
public int minCut(String s) {
int len = s.length();
if(len == 0)
return 0;
boolean[][] Mat = getMat(s);
int[] minCut = new int[len + 1];
/ F(i)初始化
// F(0）= -1，必要项，如果没有这一项，对于重叠字符串“aaaaa”会产生错误的结果
for(int i = 0; i <= len; ++i){
minCut[i] = i - 1;
}
for(int i = 1; i <= len; ++i){
for(int j = 0; j < i; ++j){
// F(i) = min{F(i), 1 + F(j)}, where j<i && j+1到i是回文串
// 从最长串判断，如果从第j+1到i为回文字符串
// 则再加一次分割，从1到j，j+1到i的字符就全部分成了回文字符串
if(Mat[j][i - 1]){
minCut[i] = Math.min(minCut[i], minCut[j] + 1);
}
}
}
return minCut[len];
}
}
/*
上述方法判断回文串时间复杂度O(n^2)
主方法两次循环时间复杂度O(n^2)
总体时间复杂度O(n^2) ~ O(2 * n^2) = O(n^2) + O(n^2)
总结：
简单的动态规划问题，状态，状态递推和状态初始化都比较直观
对于复杂的动态规划问题，状态，状态递推和状态初始化都比较隐含，需要仔细推敲
尤其是状态递推可能需要额外的辅助判断条件才能达成。
*/
}
}

