

import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;



// 有一个神奇的口袋，总的容积是40，用这个口袋可以变出一些物品，这些物品的总体积必须是40。John现在
//有n个想要得到的物品，每个物品的体积分别是a1，a2……an。John可以从这些物品中选择一些，如果选出的
//物体的总体积是40，那么利用这个神奇的口袋，John就可以得到这些物品。现在的问题是，John有多少种不
//同的选择物品的方式。
//方法一：
/*
public class Main{
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        int count=0;
        int n=in.nextInt();
        int[] a=new int [n];
        for(int i=0;i<n;i++){
            a[i]=in.nextInt();
        }
        for(int i=1;i<=n;i++){
            count+=Number(a,n,i);
        }
        System.out.println(count);
    }
    public static int Number(int[] a,int n,int i){
        int sum=0;
        int count=0;
        for(int j=0;j<n;j++){
            for(int k=0;k<i;k++){
                sum+=a[k];
            }
            if(sum==40){
                count++;
            }
            sum=0;
        }
        return count;
    }
}

//方法二：采用递归思想： ①物品n个，物品体积逐一放入weight[]中 ②递归函数count(int s,int n) : 其
//中s为剩余物品重量，n为剩余可选的物品个数
//则分以下两步递归求解：
//a.从后往前装，装上weight[n]后，若剩余物品仍然有解
//则count(s-weight[n],n-1);
//b.若装了weight[n]后，无解，则删除该包,尝试第n-1个
//count(s,n-1);


import java.util.*;
    public class Main {
        static int[] weight;
        static int N;
        static int count=0;
        public static void main(String[] args) {
            Scanner input = new Scanner(System.in);
            while (input.hasNext()) {
                N = input.nextInt();
                weight = new int[N+1];
                for (int i = 1; i <= N; i++) {
                    weight[i] = input.nextInt();
                }
                count(40,N);
                System.out.println(count);
            }
        }
        public static void count(int s,int n) {
            //如果正好装满
            if(s==0) {
                ++count;
                return ;
            }
            //是s<0或n<1则不能完成
            if(s<0||(s>0&&n<1))
                return ;
            count(s-weight[n],n-1);
            count(s,n-1);
        }
    }
