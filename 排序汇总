public class Solution {
    void BubbleSort(int[] nums,int n)//冒泡排序// 从小到大
    {
        for(int i=0;i<n-1;i++)//i代表排序次数,一共n-1次
        {
            boolean exchange=false;//监督变量，判断一次排序中是否发生了交换事件
            for(int j=0;j<n-i-1;j++)//j代表每次拿来比较的数的下标，每次都从0开始，上限是n-i-1
            {
                if(nums[j]>nums[j+1])
                {
                    exchange=true;
                    int temp=nums[j];
                    nums[j]=nums[j+1];
                    nums[j+1]=temp;
                }
            }
            if(!exchange)//如果没有发生交换说明已经排好序了，直接退出
                break;
        }
    }
    void BubbleSort3(int[] nums,int n)//冒泡排序//从大到小
    {
        for(int i=0;i<n-1;i++)//i代表排序次数,一共n-1次
        {
            boolean exchange=false;//监督变量，判断一次排序中是否发生了交换事件
            for(int j=0;j<n-i-1;j++)//j代表每次拿来比较的数的下标，每次都从0开始，上限是n-i-1
            {
                if(nums[j]<nums[j+1])
                {
                    exchange=true;
                    int temp=nums[j];
                    nums[j]=nums[j+1];
                    nums[j+1]=temp;
                }
            }
            if(!exchange)//如果没有发生交换说明已经排好序了，直接退出
                break;
        }
    }


    void BubbleSort1(int[] nums,int n){ //从大到小
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]>nums[j]){
                    int temp=nums[j];
                    nums[j]=nums[i];
                    nums[i]=temp;
                }
            }
        }
    }
    void BubbleSort2(int[] nums,int n){//从小到大
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]<nums[j]){
                    int temp=nums[j];
                    nums[j]=nums[i];
                    nums[i]=temp;
                }
            }
        }
    }


    void InsertionSort(int[] nums,int n)//插入排序 从小到大
    {
        for(int i=1;i<n;i++)//i代表选取数的下标
        {
            for(int j=i;j>0;j--)//j代表从i-1开始比较，直到找到合适位置
            {
                if(nums[j]<nums[j-1])//如果选取数比当前数小则交换
                {
                    int temp=nums[j-1];
                    nums[j-1]=nums[j];
                    nums[j]=temp;
                }
                else//如果选取数不比当前数小
                    break;
            }
        }
    }

    //插入排序  从小到大
    void InsertionSort1(int[] a,int n){
        for(int i=1;i<n;i++){
            insert(a,i-1,i);
        }
    }

    private void insert(int[] a, int i, int i1) {
        while(i>=0&&i1<a.length){
            if(a[i]>a[i1]){
                int t=a[i1];
                a[i1]=a[i];
                a[i]=t;
                insert(a,i-1,i);    //递归遍历
            }
            else
                break;
        }

    }
//插入排序
     void insertSort(int[] array) {
        for (int i = 1; i < array.length; i++) {
            // 有序   [0, i)
            // 无序   [i, array.length)
            int key = array[i];
            int j;
            for (j = i - 1; j >= 0; j--) {
                if (array[j] <= key) {
                    break;
                } else {
                    array[j + 1] = array[j];
                }
            }
            array[j + 1] = key;
        }
    }



    void insertSort0(int[] array) {
        for (int i = 1; i < array.length; i++) {
            // 有序   [0, i)
            // 无序   [i, array.length)
            int key = array[i];
            int j;
            for (j = i - 1; j >= 0 && array[j] > key; j--) {
                array[j + 1] = array[j];
            }
            array[j + 1] = key;
        }
    }
    //选择排序  从小到大
    void SelectionSort(int[] nums,int n)
    {
        for(int i=0;i<n-1;i++)//i代表排序次数,一共n-1次
        {
            int min_id=i;//每次遍历查找最小数的下标
            for(int j=i+1;j<n;j++)//j代表遍历下标，每次都从i+1开始，遍历到最后一个数
            {
                if(nums[j]<nums[min_id])
                    min_id=j;
            }
            if(min_id!=i)//如果最小数下标和最初位置不等则交换
            {
                int temp=nums[i];
                nums[i]=nums[min_id];
                nums[min_id]=temp;
            }
        }
    }
//选择排序   从大到小
    void SelectionSort2(int[] num,int n){
        for(int i=0;i<n-1;i++){
            int max_index=i;
            for(int j=i+1;j<n;j++){
                if(num[j]>num[max_index])
                {
                    max_index=j;
                }
            }
            if(max_index!=i)//如果最小数下标和最初位置不等则交换
            {
                int temp=num[i];
                num[i]=num[max_index];
                num[max_index]=temp;
            }
        }
    }

     void SelectSort3(int[] array) {
        // 无序: [begin, end]
        int begin = 0;
        int end = array.length - 1;
        while (begin < end) {
            int minIndex = begin;
            int maxIndex = begin;
            for (int j = begin + 1; j <= end; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
                if (array[j] > array[maxIndex]) {
                    maxIndex = j;
                }
            }
            swap(array, minIndex, begin);
            if (maxIndex == begin) {
                maxIndex = minIndex;
            }
            swap(array, maxIndex, end);
            begin++; end--;
        }
    }


//希尔排序
    void ShellSort(int[] nums,int n)//希尔排序
    {
        int gap=1;
        while(gap*3+1<n)
            gap=gap*3+1;
        while(gap>0)
        {
            for(int i=0;i<gap;i++)//i代表组数，组数其实就是gap
            {
                //下面是插入排序
                for(int j=i+gap;j<n;j=j+gap)//j代表循环从组内第2个数开始，每个数间隔gap
                {
                    for(int k=j;k>=gap;k=k-gap)//k代表组内每个数都向前比较,直到找到合适位置
                    {
                        if(nums[k]<nums[k-gap])//如果选取数比当前数小则交换
                        {
                            int temp=nums[k-gap];
                            nums[k-gap]=nums[k];
                            nums[k]=temp;
                        }
                        else
                            break;
                    }
                }
            }
            gap=(gap-1)/3;
        }
    }

//希尔排序
    void shellSort(int[] array) {
        int gap = array.length;
        while (true) {
            gap = (gap / 3) + 1;
            //gap = gap / 2;
            insertSortWithGap(array, gap);
            if (gap == 1) {
                break;
            }
        }
    }
    private static void insertSortWithGap(int[] array, int gap) {
        for (int i = gap; i < array.length; i++) {
            int key = array[i];
            int j;
            for (j = i - gap; j >= 0 && array[j] > key; j -= gap) {
                array[j + gap] = array[j];
            }
            array[j + gap] = key;
        }
    }





    //堆排序
    public static void heapSort(int[] array) {
        createHeapBig(array);
        for (int i = 0; i < array.length - 1; i++) {
            // 无序 [0, array.length - i)
            // 交换 array[0], array[length - i - 1]
            // 无序 [0, array.length - i - 1)
            // 无序长度 array.length - i - 1
            // 下标 0 进行向下调整
            swap(array, 0, array.length - i - 1);
            shiftDownBig(array, 0, array.length - i - 1);
        }
    }

    private static void createHeapBig(int[] array) {
        for (int i = (array.length - 2) / 2; i >= 0; i--) {
            shiftDownBig(array, i, array.length);
        }
    }

    private static void shiftDownBig(int[] array, int i, int size) {
        while (2 * i + 1 < size) {
            int max = 2 * i + 1;
            if (max + 1 < size && array[max+1] > array[max]) {
                max = max + 1;
            }
            if (array[i] >= array[max]) {
                return;
            }
            swap(array, i, max);
            i = max;
        }
    }

    static void swap(int[] array, int minIndex, int begin) {
        int t=array[minIndex];
        array[minIndex]=array[begin];
        array[begin]=t;
    }


    public static void main(String[] args) {
        Solution s=new Solution();
        int[] nums={3,6,9,5,2,0,1,8,7,4};
        int[] nums1={3,6,9,5,2,0,1,8,7,4};
       s.insertSort(nums);
       s.insertSort0(nums1);
        for(int i=0;i<nums.length;i++){
            System.out.print(nums[i]);
        }
        System.out.println();

        for(int i=0;i<nums1.length;i++){
            System.out.print(nums1[i]);
        }

    }
}




//快速排序
/*
public class Solution {
     static void quickSort(int[] array) {
        quickSortInter(array, 0, array.length - 1);
    }

    // [left, right]
    private static void quickSortInter(int[] a, int left, int right) {
        if (left >= right) {
            // 直到 长度 <= 1
            return;
        }
        // 1. 选择基准值 array[left]
        // 2. 做 partition
        int pivotIndex = partition3(a, left, right);
        // 左边小区间 [left, pivotIndex - 1]
        // 右边小区间 [pivotIndex + 1, right]
        // 3. 分别对左右小区间按同样方式处理
        quickSortInter(a, left, pivotIndex - 1);
        quickSortInter(a, pivotIndex + 1, right);
    }

    private static int partition1(int[] a, int left, int right) {
        int begin = left;
        int end = right;
        int pivot = a[left];
        // [left, begin)        <= pivot
        // (end, right]         >= pivot
        while (begin < end) {
            while (begin < end && a[end] >= pivot) {
                end--;
            }
            while (begin < end && a[begin] <= pivot) {
                begin++;
            }
            swap(a, begin, end);
        }
        swap(a, left, begin);
        return begin;
    }

    private static int partition2(int[] a, int left, int right) {
        int begin = left;
        int end = right;
        int pivot = a[left];
        // [left, begin)        <= pivot
        // (end, right]         >= pivot
        while (begin < end) {
            while (begin < end && a[end] >= pivot) {
                end--;
            }
            a[begin] = a[end];

            while (begin < end && a[begin] <= pivot) {
                begin++;
            }
            a[end] = a[begin];
        }
        a[begin] = pivot;
        return begin;
    }

    private static int partition3(int[] a, int left, int right) {
        // array[left]
        // [left + 1, right]
        int pivot = a[left];
        int d = left + 1;
        for (int i = left + 1; i <= right; i++) {
            if (a[i] < pivot) {
                swap(a, i, d++);
            }
        }

        swap(a, d - 1, left);
        return d - 1;
    }

    private static void swap(int[] a, int i, int j) {
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }

    public static void main(String[] args) {
        Solution s=new Solution();
        int[] nums={3,6,9,5,2,0,1,8,7,4};
        for(int i=0;i<nums.length;i++){
            System.out.print(nums[i]);
        }
        System.out.println();
       // int[] nums1={3,6,9,5,2,0,1,8,7,4};
        s.quickSort(nums);
        for(int i=0;i<nums.length;i++){
            System.out.print(nums[i]);
        }
    }
}
