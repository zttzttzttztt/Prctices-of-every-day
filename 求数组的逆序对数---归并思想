private static int reversePairs2(int[] nums) {
		int len = nums.length;
		if (len < 2) {
			return 0;
		}
		int[] copy = new int[len];
		for (int i = 0; i < len; i++) {
			copy[i] = nums[i];
		}
		int[] temp = new int[len];

		return reversePair(copy, 0, len - 1, temp);
	}

	// nums[left...right]计算逆序对个数并且排序
	private static int reversePair(int[] nums, int left, int right, int[] temp) {
		// TODO Auto-generated method stub
		if (left == right) {
			return 0;
		}
		int mid = left + (right - left) / 2;
		int leftPairs = reversePair(nums, left, mid, temp);
		int rightPairs = reversePair(nums, mid + 1, right, temp);
		// 如果整个数组已经有序，则无需合并，注意这里使用小于等于
		if (nums[mid] <= nums[mid + 1]) {
			return leftPairs + rightPairs;
		}

		int crossPairs = mergeAndCount(nums, left, mid, right, temp);
		return leftPairs + rightPairs + crossPairs;
	}

	// nums[left..mid]有序，nums[mid+1..right]有序
	private static int mergeAndCount(int[] nums, int left, int mid, int right, int[] temp) {
		// TODO Auto-generated method stub
		for (int i = left; i <= right; i++) {
			temp[i] = nums[i];
		}
		int i = left;
		int j = mid + 1;

		int count = 0;
		for (int k = left; k <= right; k++) {
			// 有下标访问，的先判断是否越界
			if (i == mid + 1) {
				nums[k] = temp[j];
				j++;
			} else if (j == right + 1) {
				nums[k] = temp[i];
				i++;
			} else if (temp[i] < temp[j]) {
				// 注意。这里是<=,写成<就不对，可以想想原因
				nums[k] = temp[i];
				i++;
			} else {
				nums[k] = temp[j];
				j++;
				// 在j指向的元素归并回去的时候，计算逆序对的个数，只多了这一行代码
				count += (mid - i + 1);
			}
		}
		return count;
	}
