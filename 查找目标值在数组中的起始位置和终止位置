
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int i=0;
        int j=nums.length-1;
        while(i<j){
            while(nums[i]<target&&i<j){
                i++;
            }
            while(nums[j]>target&&i<j){
                j--;
            }
            if(nums[i]==target&&nums[j]==target){
                nums=new int[2];
                nums[0]=i;
                nums[1]=j;
                return nums;
            }
        }
        nums=new int[2];
        nums[0]=-1;
        nums[1]=-1;
        return nums;
    }

    public static void main(String[] args) {
        Solution s=new Solution();
        int[] nums={1,2,3,4,5,6,6,6,7,8};
        int target=6;
      int[]  nums1=s.searchRange(nums,target);
        for(int i=0;i<2;i++) {
            System.out.println(nums1[i]);
        }
    }
}

方法二：
 
public class Solution {
    public static void main(String[] args) {
        Solution s=new Solution();
        //x 为整数 随便定义
        int b = 7;
        int[] a = {5, 7, 7, 7, 8, 8, 10};
        int[] c = new int[2];
//起始位置
        int i = s.find(a, a.length, b, 1);
        //结束位置
        int j = s.find(a, a.length, b, 2);
        c[0] = i;
        c[1] = j; //起始位置和结束位置相同
        if (i == j) {
            c[0] = i;
            c[1] = -1;
        }
        for(int l=0;l<2;l++){
            System.out.println(c[l]);
        }
    }

    public static int find(int[] a, int length, int b, int type) {
        if (type == 1) {
            for (int i = 0; i < length; i++) {
                if (a[i] == b) {
                    return i;
                }
            }
        } else if (type == 2) {
            for (int j = length - 1; j >= 0; j--) {
                if (a[j] == b) {
                    return j;
                }
            }
        }
        return -1;
    }
}
