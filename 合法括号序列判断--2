合法括号序列判断
//一个合法的括号串定义为：1.只包括括号字符；2.左括号和右括号一一对应
//方法一：
public class Main{
    public static void main(String[] args) {
        Scanner in=new Scanner(System.in);
        while(in.hasNextLine()){
            String s=in.nextLine();
            String[] s1=s.split(" ");
            String s2=s1[0];
            int n=Integer.parseInt(s1[1]);
            System.out.println(eligal(s,n));
        }
    }

    private static boolean eligal(String s,int n) {
        Queue<Character> queue=new PriorityQueue<>();
        Stack<Character> stack =new Stack<>();
        char[] a=s.toCharArray();
        for(int i=0;i<n;i++){
            if (a[i] == '(' || a[i] == '{' || a[i] == '[') {
                queue.add(a[i]);
            }else if(a[i] == ')' || a[i] == '}' || a[i] == ']'){
                stack.push(a[i]);
            }else {
                return false;
            }
        }
        if(queue.size()!=stack.size()){
            return false;
        }else {
            while (!queue.isEmpty() && !stack.isEmpty()) {
                char s1=stack.pop();
                char s2=queue.remove();
                if (!(s1==')'&&s2=='(')) {
                    return false;
                }
            }
            return true;
        }
    }
}

//方法二：1.碰到")"开始弹出栈顶的"("，如果此时栈为空，则返回false 2.碰到其他内容直接返回false 3.字符串结尾时，
//栈非空返回false

import java.util.Stack;
public class Parenthesis {
    public boolean chkParenthesis(String A, int n) {
        Stack<Character> lefts = new Stack<Character>();
        if(A == null || A.length() != n){
            return false;
        }
        for(int i = 0; i < n; i++){
            if(A.charAt(i) == '('){
                lefts.push(A.charAt(i));
            }
            else if(A.charAt(i) == ')'){
                if(lefts.empty()){
                return false;
                }else{
                    lefts.pop();
                }
            }else{
                return false;
            }
        }
        if(!lefts.empty()){
            return false;
        }else{
            return true;
        }
    }
}
