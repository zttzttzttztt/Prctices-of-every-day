
public class Solution {
public int numDistinct(String S, String T) {
int sLen = S.length();
int tLen = T.length();
int[][] numDis = new int[sLen + 1][tLen + 1];
numDis[0][0] = 1;
// F(i,j)，初始化第一行剩余列的所有值为0
for(int i = 1; i <= tLen; ++i){
numDis[0][i] = 0;
}
//F(i, 0) = 1
for(int i = 1; i <= sLen; ++i){
numDis[i][0] = 1;
}
for(int i = 1; i <= sLen; ++i){
for(int j = 1; j <= tLen; ++j){
// S的第i个字符与T的第j个字符相同
if(S.charAt(i - 1) == T.charAt(j - 1)){
numDis[i][j] = numDis[i - 1][j] + numDis[i - 1][j - 1];
}
else{
// S的第i个字符与T的第j个字符不相同
// 从S的前i-1个字符中找子串，使子串与T的前j个字符相同
numDis[i][j] = numDis[i - 1][j];
}
}
}
return numDis[sLen][tLen];
}
}
/*
此题也可优化空间复杂度为O(n)
f[i][j] 只和 f[i - 1][j], f[i - 1][j - 1]有关
类似于背包问题，可以用一维数组保存上一行的结果，每次从最后一列更新元素值
*/
public class Solution {
public int numDistinct(String S, String T) {
int sLen = S.length();
int tLen = T.length();
int[] numDis = new int[tLen + 1];
numDis[0]= 1;
for(int i = 1; i <= tLen; ++i){
numDis[i] = 0;
}
for(int i = 1; i <= sLen; ++i){
for(int j = tLen; j > 0; --j){
if(S.charAt(i - 1) == T.charAt(j - 1)){
numDis[j] = numDis[j] + numDis[j - 1];
}
}
}
return numDis[tLen];
}
}
