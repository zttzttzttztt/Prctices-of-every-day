

class Solution {
    public int findUnsorted(int[] num){
      int[] num1=new int[num.length];
      for(int i=0;i<num.length;i++){
          num1[i]=num[i];
      }
      for(int i=0;i<num.length;i++){
          System.out.print(num1[i]+" ");
      }
      System.out.println();
      num=SelectionSort(num,num.length);
        for(int i=0;i<num.length;i++){
            System.out.print(num[i]+" ");
        }
        int i=0,j=num1.length-1;
        while(i<j){
            if(num[i]!=num1[i]&&num[j]!=num1[j]){
                break;
            }
            if(num[i]==num1[i]){
                i++;
            }
            if(num[j]==num1[j]){
                j--;
            }
        }
        return j-i+1;
    }
    int[]  SelectionSort(int[] nu,int n)//选择排序
    {
        for(int i=0;i<n-1;i++)//i代表排序次数,一共n-1次
        {
            int min_id=i;//每次遍历查找最小数的下标
            for(int j=i+1;j<n;j++)//j代表遍历下标，每次都从i+1开始，遍历到最后一个数
            {
                if(nu[j]<nu[min_id])
                    min_id=j;
            }
            if(min_id!=i)//如果最小数下标和最初位置不等则交换
            {
                Swap(nu,min_id,i);
            }
        }
        return nu;
    }

    private void Swap(int[] nums, int min_id, int i) {
        int t=nums[min_id];
        nums[min_id]=nums[i];
        nums[i]=t;
    }

    public static void main(String[] args) {
        Solution s=new Solution();
        int[] n={2,6,8,4,10,9,15};
        System.out.println(s.findUnsorted(n));
    }
}

